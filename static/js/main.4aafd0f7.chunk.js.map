{"version":3,"sources":["card/card.components.jsx","card_list/card-list.components.jsx","search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","username","email","CardList","monsters","map","mon","key","Search","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","res","json","user","setState","this","monsterSearch","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mUAEaA,G,MAAK,SAACC,GAAD,OAEd,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,YAAYC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAChC,gCAAML,EAAMI,QAAQE,MACpB,2BAAIN,EAAMI,QAAQG,UAClB,2BAAIP,EAAMI,QAAQI,UCLLC,G,MAAS,SAACT,GAAD,OAElB,yBAAKC,UAAU,aAEPD,EAAMU,SAASC,KACX,SAAAC,GAAG,OAAE,kBAAC,EAAD,CAAMC,IAAKD,EAAIP,GAAID,QAASQ,UCNpCE,G,MAAQ,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAEjB,2BAAOC,KAAK,SAAShB,UAAU,SAASc,YAAaA,EAAaG,SAAUF,MCmCjEG,G,wDAhCb,aACC,IAAD,8BACE,gBACKC,MAAM,CACTV,SAAS,GACTW,YAAY,IAJhB,E,gEAQC,IAAD,OACEC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAI,OAAE,EAAKC,SAAS,CAACjB,SAASgB,S,+BAGrC,IAAD,SAC+BE,KAAKR,MAA3BV,EADT,EACSA,SAASW,EADlB,EACkBA,YACVQ,EAAcnB,EAASoB,QAC3B,SAAAlB,GAAG,OAAEA,EAAIN,KAAKyB,cAAcC,SAASX,EAAYU,kBAGnD,OACE,yBAAK9B,UAAU,OACb,wBAAIA,UAAU,WAAd,oBACA,kBAAC,EAAD,CAAQc,YAAY,qBAAqBC,aAAc,SAAAiB,GAAC,OAAE,EAAKN,SAAS,CAACN,YAAYY,EAAEC,OAAOC,WAC9F,kBAAC,EAAD,CAAUzB,SAAUmB,S,GA3BVO,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4aafd0f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card.style.css'\r\nexport const Card=(props)=>\r\n(\r\n    <div className='card-container'>\r\n        <img alt='load soon' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n<h1> {props.monster.name}</h1>\r\n<p>{props.monster.username}</p>\r\n<p>{props.monster.email}</p>\r\n\r\n    </div>\r\n)","import React from 'react';\r\nimport {Card} from '../card/card.components'\r\nimport './card-list.style.css'\r\nexport const CardList=(props)=>\r\n(\r\n    <div className='card-list'>\r\n        {\r\n            props.monsters.map(\r\n                mon=><Card key={mon.id} monster={mon}></Card>\r\n            )\r\n        }\r\n    </div>\r\n)","import React from \"react\";\r\nimport './search.style.css';\r\nexport const Search =({placeholder,handleChange})=>\r\n(\r\n    <input type='search' className='search' placeholder={placeholder} onChange={handleChange}></input>\r\n)","import React,{Component} from 'react';\nimport {CardList} from './card_list/card-list.components';\nimport {Search} from './search/search.component'\n\nimport './App.css';\nclass App extends Component\n{\n  constructor()\n  {\n    super()\n    this.state={\n      monsters:[],\n      searchField:''\n    }\n  }\n  componentDidMount()\n  {\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n    .then(res=>res.json())\n    .then(user=>this.setState({monsters:user}))\n  }\n  render()\n  {\n    const {monsters,searchField}=this.state;\n    const monsterSearch=monsters.filter(\n      mon=>mon.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return(\n      <div className='App'>\n        <h1 className='head-h1'>Monster Rolodex </h1>\n        <Search placeholder='enter monster name' handleChange={e=>this.setState({searchField:e.target.value})}></Search>\n        <CardList monsters={monsterSearch}></CardList>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}